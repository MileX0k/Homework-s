#include <stdio.h>
#include <stdlib.h>

void swap (int *a, int *b)
{
    int x = *a;
    *a = *b;
    *b = x;
}
void initArr(int* arr, int n)
{
	for (int i = 0; i < n; i++)
	{
		arr[i] = rand() % 100;
	}

}

void printArr(int* arr, int n)
{
	for (int i = 0; i < n; i++)
	{
		printf ("%d  " , arr[i]);
	}
	printf ("\n");
}


//===================================================================


void bucketSort(int* arr, int n)
{
	int const max = n;
	int const cell = 10;

	int buckets[cell][max + 1];
	for (int i = 0; i < cell; ++i){
        buckets[i][max] = 0;
	}

    for (int digit = 1; digit < 10000; digit*=10){
         for (int i = 0; i <max; i++){
                if( arr[i] %2 == 0){

                int d = (arr[i] / digit) % cell;
                buckets[d][buckets[d][max]++] = arr[i];
                arr[i] = -1;
                }
        }



            int idx = 0;
            for (int i = 0; i < cell; ++i){
                for (int j = 0; j < buckets[i][max]; ++j){
                    while (arr[idx] != -1) idx++;

                    arr[idx] = buckets[i][j];
                }
                buckets[i][max] = 0;
            }
    }
}


//===================================================================


void quickSort(int* arr, int first, int last)
{
 int i = first;
 int j = last;
 int x = arr[(first + last) / 2];

 do {
    while (arr[i] < x) i++;
    while (arr[j] > x) j--;

    if (i<=j)
    {
        swap(&arr[i], &arr[j]);
        i++; j--;
    }
 }  while (i <= j);

 if (i < last) quickSort(arr, i, last);
 if (first < j) quickSort(arr, first, j);

}


int main()
{
	int const SIZE = 20;
	int array[SIZE];

//=========Первая часть ДЗ=======================

	printf("Quick sort: \n");
    initArr(array, SIZE);
	printArr(array, SIZE);
    quickSort(array, 0, SIZE - 1);
    printArr (array, SIZE);

//=========Вторая часть ДЗ=======================

	printf("Backet sort: \n");
	initArr(array, SIZE);
	printArr(array, SIZE);
	bucketSort(array, SIZE);
	printArr(array, SIZE);

	return 0;
}
